
Docker Swarm
-> Initialize cluster with swarm  docker swarm init --advertise-addr <Private_Ip> 
   NOTE: addvertise addr -> this flag configures the IP adress for the manager node and the other nodes in the swarm must be able to
   access the manager IP address.
   
   you can see the number of managers  and node from docker info part
 -> you can list the current nodes in the swarm docker node ls (manager does count as a node )
 -> To generate token for join as a worker:
       docker swarm join-token worker 
       docker swarm join --token <TOKEN>
 - > According to the docker swarm architecture manager can speak with other manager and worker.
 - > Worker cannot speak with each other.
 - > Manager node use RAFT algorithm to make a concensus. This algorithm provides cluster work healthy.
 
 Docker Swarm Restore and Backup : 
      -> In a prodcution environement , it's always a good idea to back up critical data
        Steps for backup : 
            -> Stop the docker service (sudo systemctl stop docker)
            -> Back up all data in the directory /var/lib/docker/swarm (sudo tar -zvcf backup.tar.gz -C /var/lib/docker/swarm .)
            -> Start docker service (sudo systemctl start docker)
       Steps for restore : 
             -> Stop the docker service (sudo systemctl start docker)
             -> Delete the existing docker swarm file (rm -rf /var/lib/docker/swarm/*)
             -> Copy files (sudo tar -zxvf backup.tar.gz -C /var/lib/docker/swarm/) 
             -> Start the docker (sudo systemctl start docker)
             
  
             
             
   Namespace and CGroups:
   -> cgroups and namespace are capabilities of kernel. Shortly, cgroups limit how much resources you can use.
    cgroups are metering and limiting ; memory, cpu ,network,block I/O
    cgroups can be called as resoruce management.It decides how much resources can allocate for container
   -> Namespace provides process isolation complete isolation of containers, separate file system
   -> Namespacing is  limiting whatever container see.
    chroot and unshare systemcall can be used.
   
   Docker swarm autolock
    -> It provides encyrpted communication between  nodes
    -> RAFT logs for swarm manager
    -> TLS communication between nodes. 
    docker swarm init --autolock
    docker swarm update --autolock=false
    docker swarm update --autolock=true
         -> after restart your cluster , you should keep your unlock key otherwise , you cannot connect cluster.
    docker swarm unlock
    Working with autolock
        -> Whenever docker restarts on manager , you must unlock docker swarm
          docker swarm unlock
        -> To get unlock key for docker swarm, to view unlock key
          docker swarm unlock-key
        -> To rotate your key
          docker swarm unlock-key --rotate
          
     Docker service create : 
     docker service create --name -p --env --mount --replicas
     docker service ls
     docker service ps <Service>
     docker service inspect <Service>
     docker service update --replicas <Service>
     docker service rm <Service>
     To see the task of docker swarm service :
     docker service ps <Service_Name>
     Replicated and Global Service :
      -> Replicated services are using requested number of replicas for cluester.
        docker service create --name test --replicas 3 nginx
      ->Global services run one task in one node in cluster
        docker service create --mode global nginx
        
     Scaling Service : 
      docker service update --replicas 3 nginx
      docker service scale nginx=4
      Two different ways to scale a service:
      docker service update --replicas 3 nginx
      docker service scale nginx=4
      
      Delete a service:
      docker service rm nginx
      
      How to revert changes form service:
      docker service rollback my-service
      
      docker service inspect --format='{{.ID}}' nginx-svc
      To get service logs
      docker service logs service_name
      
     Docker Stack : A stack is a collection o interrelated services that can be deployeed and scaled as  a unit.
     docker stacks are similir to the multicontainer applications created using docker compose.
     docker stack command:
     docker stack deploy -c <Compose file>
     docker stack ls  -> list current stacks
     docker stack services stack -> list associated services in stack
     docker stack ps STACK ->list task associated with a stack
     docker stack rm  -> remove stack
     
     Node Labels
         -> you can add pieces of metadata to your swarm nodes using labels.
         -> It is important for high availability.
         -> You can add label for nodes :
               docker node update --label-add availability_zone=east <NODE_NAME>
               docker node update --label-add availability_zone=west <NODE_NAME>
         -> To view existing label
               docker node inspect --pretty <NODE_NAME>
         -> "--constaint" when you create a service to restirct which nodes will be used to execute task
               docker service create --name nginx-east --constraint node.labels.availability_zone==east --replicas 3 nginx
               docker service ps nginx-east
               docker service create --name nginx-west --constraint node.labels.availability_zone!=east --replicas 3 nginx
               docker service ps nginx-west
         -> "--placement-pref" to spread tasks evenly based on value of specific label
                docker service create --name nginx-spread --placement-pref spread=node.labels.availability_zone --replicas 3 nginx
                docker service ps nginx-spread
   
