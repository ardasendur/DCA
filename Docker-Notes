Storage Driver: Temporary internal storage of container's writeable layer
Docker supports variety of storage driver: 
  - > Overlay2 : File-based storage. (Ubuntu and CentOS +8) (Reeding for disk)
  - > DeviceMapper: Block storage, more efficent for doing lots of writes.
 
 There are two ways to override storage driver : 
 1-) Set the storage-driver value in "/etc/daemon/daemon.json" 
 2-) Set the --storage-driver flag when starting docker (in your system unit file)
 
First method is recommended.
- > "/etc/daemon/daemon.json" It is daemon config file.

Docker run - detached mode -d 
docker run --restart (Specify when the container shoduld be automatically restarted.)

restart options: no (default), on-failure, always,unless-stopped
  - NO : Never restart the container
  - On-failure: Only the if container fails.
  - always: Always restart the container whether it succeeds or fails.
  - Unless-stooped: Unless the container was manually stooped ,always restart the container
  
-p <host-port>:<container-port>  
-rm  - Automatically remove the container when it exist Cannot be used for restart.
--memory : Hard limit on memory (not use more than defined value)
--memory-reservation : A soft limit
Container commands: 
  docker container stop 
  docker container start
  docker container rm 

To upgrade and downgrade docker :
sudo apt-get install -y docker-ce = ...
sudo apt-get remove -y docker-ce = ...

Docker Images: 
 Containers and images use a layered file system. Each layer contains only the differeces from the previous layer.
 
Layered File System 
   -> Smaller overall storage footprint.
   -> Faster image trasfer.
   -> Faster image build.
 
 Download the image from remote registry : docker image pull IMAGE[:TAG]
 List the layer on build image : docker image history IMAGE
 
 Docker File :
  Helps you to create your own image.
  EXPOSE : documents which port are intended to published.(not published the port just documentation)
  WORKDIR : set the current working directory  for  add,copy ,cmd,entrypoint
    Multiple workdir is also possible.
    It is important workidr can be relative and absoulute like that: 
      WORKDIR /var
      WORKDIR www
      WORKDIR html
  COPY : copy the local  file to the image 
  STOPSIGNAL: Specify the signal that will be used to stop the container
    STOPSIGNAL SIGTERM 
  HEALTCHECK: Specifiy a command to rum in order to perform a custom healt check. It helps you to verify container work properly.
    HEALTCHECK CMD curl localhost:80
  
  Efficient Docker Images:
     -> Put the thing that are less likely to change on lower-level layers.
     -> Don't create unnecassary layer
    Multi- Stage Builds:
      - > Docker support the ability to perform multi-stage builds. Multi stage builds have more than one "FROM" directives.
      
  Managing Images: 
    -> docker image pull 
    -> docker image inspect NAME - > Get detailed information about image
    -> docker rmi NAME
    -> docker image rm NAME
    -> docker image inspect IMAGE --format  -> To get only subset of the information.
        EX : docker image inspect nginx --format "{{.Architecture}}"
        EX : docker image inspect nginx --format "{{.Os}}"
    -> Whenever images are used in container you can delete images by using -f option.
    -> docker image prune (Delete unused images from the system)
  
  Flatteninig Docker Image to Single Layer :
  Images composed of multi layer , if you want to make image one layer following steps can be implemented.
   - > Run a container from image
        docker run -d IMAGE
   - > Export the container to an archive using "docker export"
         docker export flat_image | flat_tar
   - > Import the archive as a new image using "docker import" 
         cat flat_tar | docker import - flat:latest
  The result image will have only one layer!
    docker export
    docker import 
 Multi-Stage Builds
 - Docker support multi-stage builds. It contains more than one "FROM" directive starting new stage file system layers.
 - You can also name your stages with FROM...AS, then reference the name with COPY --from 
 To get Ip of container
 docker inspect --format '{{ .NetworkSettings.IPAddress }}' container_name_or_id  

 - To display layer of images by using docker history <Image_ID>
 - To see the file size of your containers, you can use the --size argument of docker ps
        docker ps --size or docker ps -a --size
 Differences between "ADD" and "COPY" :
     The major differences between two of them is "ADD" src can be URL.
     ADD allows <src> to be a URL
     According to the dockerfile best practise: 
      Because image size matters, using ADD to fetch packages from remote URLs is strongly discouraged; you should use curl or wget
      instead. 
       You should avoid doing things like:
              Dockerfile 1 
                  ADD http://example.com/big.tar.xz /usr/src/things/
                  RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things
                  RUN make -C /usr/src/things all
               Dockerfile 2
                  RUN mkdir -p /usr/src/things \
                    && curl -SL http://example.com/big.tar.xz \
                    | tar -xJC /usr/src/things \
                    && make -C /usr/src/things all
                    
                    
Docker Swarm
 - > According to the docker swarm architecture manager can speak with other manager and worker.
 - > Worker cannot speak with each other.
 - > Manager node use RAFT algorithm to make a concensus. This algorithm provides cluster work healthy.
